#!/usr/bin/env bash
#Read:
#&
#https://bashitout.com/2013/05/18/Ampersands-on-the-command-line.html
#init.d
#https://www.ghacks.net/2009/04/04/get-to-know-linux-the-etcinitd-directory/
#Daemon
#https://en.wikipedia.org/wiki/Daemon_%28computing%29
#Positional parameters
#https://www.gnu.org/software/bash/manual/html_node/Positional-Parameters.html
#man: sudo
#Programs that are detached from the terminal and running in the background are called daemons or processes, need to be managed. The general minimum set of instructions is: start, restart and stop. The most popular way of doing so on Unix system is to use the init scripts.
#Write a manage_my_process Bash script that:
#Indefinitely writes I am alive! to the file /tmp/my_process
#In between every I am alive! message, the program should pause for 2 seconds
#Write Bash (init) script 11-manage_my_process that manages manage_my_process. (both files need to be pushed to git)
#Requirements:
#When passing the argument start:
#Starts manage_my_process
#Creates a file containing its PID in /var/run/my_process.pid
#Displays manage_my_process started
#When passing the argument stop:
#Stops manage_my_process
#Deletes the file /var/run/my_process.pid
#Displays manage_my_process stopped
#When passing the argument restart
#Stops manage_my_process
#Deletes the file /var/run/my_process.pid
#Starts manage_my_process
#Creates a file containing its PID in /var/run/my_process.pid
#Displays manage_my_process restarted
#Displays Usage: manage_my_process {start|stop|restart} if any other argument or no argument is passed
#Note that this init script is far from being perfect (but good enough for the sake of manipulating process and PID file), for example we do not handle the case wherr we check if a process is already running when doing ./11-manage_my_process start, in our case it will simply create a new process instead of saying that it is already started

#if there is the word start in the command line
if [ "$1" == "start" ]
then
    touch /var/run/my_process.pid &
    ./manage_my_process &
    echo $$ > /var/run/my_process.pid &
    echo "manage_my_process started"
elif
    #if there is the word stop in the command line
    [ "$1" == "stop" ]
then
    echo "manage_my_process stopped" &&
    pkill -9 -f ./manage_my_process &&
    rm /var/run/my_process.pid
elif
    #if there is the word restart in the command line
    [ "$1" == "restart" ]
then
    echo "manage_my_process restarted"
    pkill -9 -f ./manage_my_process &&
    rm /var/run/my_process.pid &&
    touch /var/run/my_process.pid &&
    ./manage_my_process &&
    echo $$ > /var/run/my_process.pid &
else
    # if there is not any of these 3 words start or stop or restart in the command line
    echo "Usage: manage_my_process {start|stop|restart}"
    fi
